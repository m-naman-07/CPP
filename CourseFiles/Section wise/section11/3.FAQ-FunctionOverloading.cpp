/*
FAQ-Function overloading
üî∑ 1. üîç What is a Function Signature?
‚úÖ Definition:
The function signature (or function prototype) is the part of a function declaration that tells the compiler:
 ‚Ä¢The name of the function
 ‚Ä¢The number, types, and order of its parameters

‚ö†Ô∏è The return type is NOT part of the signature in C++.

üß© Example:
    int sum(int a, float b);  // function prototype (also a signature)

This tells the compiler:
‚Ä¢Function name = sum
‚Ä¢Parameters = 2
    ‚Ä¢First = int
    ‚Ä¢Second = float

Even if parameter names (a, b) are changed:
    int sum(int x, float y);  // same signature

‚û°Ô∏è Still considered exactly the same signature

üî∑ 2. üìå What is a Function Prototype?
A function prototype is a declaration of a function that tells the compiler its signature before the actual definition.

üß© Example:
    // Prototype
    int max(int a, int b);

    // Later definition
    int max(int a, int b) {
        return (a > b) ? a : b;
    }

This is helpful when:
‚Ä¢Defining functions after main()
‚Ä¢Splitting code into header files and implementation

‚ÄúDefining functions after main(),‚Äù
We mean: You can write the actual body (definition) of a function after the main() function, as long as you declare (or prototype) it before main().

‚úÖ Example Without Prototype (‚ùå Will cause error):
    #include <iostream>
    using namespace std;

    int main() {
        greet();  // ‚ùå Error: ‚Äògreet‚Äô was not declared in this scope
    }

    void greet() {
        cout << "Hello, world!";
    }

The compiler processes code top to bottom, and it doesn‚Äôt know about greet() when it reaches main().

‚úÖ Correct Way: Use a Function Prototype
    #include <iostream>
    using namespace std;

    // Function prototype (tells compiler the signature)
    void greet();

    int main() {
        greet();  // ‚úÖ Now this works
    }

    // Function definition (actual logic)
    void greet() {
        cout << "Hello, world!";
    }

üß† Why This Works:
‚Ä¢The prototype (also called function declaration) tells the compiler:
    ‚Ä¢"A function named greet() exists with this signature ‚Äî you‚Äôll find it later."
‚Ä¢Then the compiler allows main() to use it.

üîÅ Real-Life Analogy:
Imagine you're writing a book:
   ‚Ä¢In Chapter 1, you mention "we'll explain how to fly drones in Chapter 5."
    ‚Ä¢Readers won't get confused because you gave them a forward reference.
That‚Äôs exactly what a function prototype does ‚Äî a promise to the compiler that the function will be defined later.



üî∑ 3. ‚ö° Function Overloading ‚Äî What is It?
‚úÖ Definition:
Function overloading allows multiple functions to have the same name as long as their parameter list differs.
This is a form of compile-time polymorphism.

üö´ What doesn‚Äôt count in overloads?
‚Ä¢Return type
‚Ä¢Parameter names
‚Ä¢Default arguments alone

üî∂ 4. ‚ùå Is the Return Type Considered in Overloading?
üî• No. Return type is NOT considered in overloading.
The compiler must be able to distinguish between functions based only on arguments.

‚ùå Invalid Overload:
    int sum(int a, int b);
    float sum(int x, int y);  // ‚ùå Error: same parameter types

Even though return types are different, the compiler sees:
    sum(int, int);
    sum(int, int);  // Redefinition error
‚û°Ô∏è Not overloadable

üî∂ 5. ‚úÖ Valid Overloading Cases
Function 1	         Function 2	            Overloaded?	     Reason
void fun()	         void fun(int)	        ‚úÖ Yes	        Different number
void fun(int)	     void fun(float)	    ‚úÖ Yes	        Different type
void fun(int,float)	 void fun(float, int)	‚úÖ Yes	        Different order and type
int fun(int)	     float fun(int)	        ‚ùå No	        Same signature, different
                                                            return type

üî∂ 6. üß™ Deep Dive Example:
    #include <iostream>
    using namespace std;

    void show(int x) {
        cout << "Integer: " << x << endl;
    }

    void show(float y) {
        cout << "Float: " << y << endl;
    }

    void show(char ch, int times) {
        for (int i = 0; i < times; i++)
            cout << ch << ' ';
        cout << endl;
    }

Output:
show(5)       ‚Üí Integer: 5
show(3.14f)   ‚Üí Float: 3.14
show('*', 3)  ‚Üí * * *
The compiler determines which function to call based on the arguments' types and number.

üî∑ 7. üß† Internal Compiler Behavior
C++ uses name mangling internally to implement function overloading.

üëá Example:
    int add(int, int);       // becomes _Z3addii
    float add(float, float); // becomes _Z3addff
‚û°Ô∏è These are completely different symbols in the compiled object file.
That‚Äôs why overloading based on parameters works, but return type alone won‚Äôt create different symbols ‚Äî so it fails.

üî∑ What is Name Mangling?
Name mangling is a process where the C++ compiler changes (mangles) the function names internally to encode additional information like:
‚Ä¢Function name
‚Ä¢Number of parameters
‚Ä¢Types of parameters
‚Ä¢Parameter order
‚Ä¢Namespace or class (if any)

‚úÖ Why is it Needed?
In C, function names are unique ‚Äî no overloading.
In C++, you can have multiple functions with the same name (function overloading).
üëâ To tell them apart, the compiler "mangles" their names into unique internal identifiers.

üß™ Example:
    int add(int a, int b);
    float add(float x, float y);
These two functions have the same name add but different types.

But the compiler internally turns them into:
_Z3addii    // for int add(int, int)
_Z3addff    // for float add(float, float)

Each mangled name includes:
‚Ä¢_Z (indicates it's mangled)
‚Ä¢3add (length + name)
‚Ä¢i i (parameter types: i for int, f for float, etc.)

üîç How is this useful?
‚Ä¢Allows function overloading
‚Ä¢Allows namespaces and classes to have functions with the same names
‚Ä¢Helps linkers identify the correct functions during compilation

‚ùå What if Return Type Was Considered?
Let‚Äôs say you write:
    int fun(int);
    float fun(int);  // ‚ùå Compiler Error!
Without name mangling, both functions would be:
    fun(int)
    fun(int)  // Conflict ‚Äî compiler can't tell them apart!
Even with name mangling, return type isn't encoded (by design), so this still causes a conflict.

‚úÖ Summary Table
Concept 	            Explanation
Name Mangling	        Process of encoding function signatures into unique names
Why Needed	            To support function overloading, namespaces, and classes
Return Type	            ‚ùå Not included in mangling (to avoid ambiguity)
Overloading Allowed	    ‚úÖ Based on number, type, order of parameters
Mangled Example	        add(int, int) ‚Üí _Z3addii

üõ† Tools to See Name Mangling:
If you use g++, try:
    g++ -S -o output.s file.cpp
or
    nm a.out
To view mangled names in your compiled binary.

üî∑ 8. ‚ö†Ô∏è Overloading & Default Parameters
Ambiguous Case:
    void fun(int x, int y = 10);
    void fun(int x); // ‚ùå Ambiguity on fun(5);
The call fun(5); could match either function ‚Äî compiler throws an error.

üîÅ Use default arguments cautiously when overloading.

üî∑ 9. ‚ú® Real-World Use Cases
Use Case	Example
abs()	Defined for int, float, double, etc.
pow()	Overloaded for int, float, double, int, etc.
std::cout <<	Overloaded for int, char, string, float, etc.
Constructors	Same class can have multiple constructors (constructor overloading)
*/
