/*
Modular Programming and Object-Oriented Programming (OOP) 

ðŸ”¹ 1. Definition
Modular Programming	
Object-Oriented Programming (OOP)

1.What it is
â€¢A design technique that breaks down a program into independent modules (functions/procedures).	
â€¢A paradigm based on the concept of objects that encapsulate data and behavior.

2.Structure unit
â€¢Modules (functions, procedures, files)	
â€¢Classes and objects

3.Focus
Decomposition based on functionality/tasks	
Decomposition based on real-world entities

ðŸ”¹ 2. Core Concepts
âœ… Modular Programming
â€¢Modules: Independent units with specific functionality.
â€¢Procedures/Functions: Key building blocks.
â€¢Code Reusability: Through function reuse.
â€¢Top-down approach.

âœ… OOP
â€¢Class & Object: Blueprint and instance of data+behavior.
â€¢Encapsulation: Hides internal details.
â€¢Inheritance: Share behavior among classes.
â€¢Polymorphism: Same interface, different behavior.
â€¢Abstraction: Hides complex details from user.

ðŸ”¹ 3. Example (C++ comparison)
ðŸ”¸ Modular Programming (C-style)
    #include <iostream>
    using namespace std;

    int add(int a, int b) {
        return a + b;
    }

    int main() {
        cout << "Sum: " << add(3, 5);
    }

ðŸ”¸ Object-Oriented Programming (C++ style)
    #include <iostream>
    using namespace std;

    class Calculator {
    public:
        int add(int a, int b) {
            return a + b;
        }
    };

    int main() {
        Calculator calc;
        cout << "Sum: " << calc.add(3, 5);
    }

ðŸ”¹ 4. Key Differences
Feature	            Modular Programming	                    OOP
Basic Unit	        Module / Function	                    Class / Object
Data Handling	    Data is global or passed explicitly	    Data is encapsulated 
                                                            within objects
Reusability	        By copying/modifying functions	        Through inheritance
                                                             & polymorphism
Scalability	        Suitable for smaller/medium apps	    Best for large, scalable 
                                                            systems
Maintainability	    Harder with growing code	            Easier due to encapsulation

Code organization	Organized around functions	            Organized around real-world 
                                                            entities
Security	        Less secure, no data hiding	            Strong encapsulation 
                                                            ensures security

ðŸ”¹ 5. Advantages
âœ… Modular Programming
â€¢Simpler to understand for beginners
â€¢Encourages separation of concerns
â€¢Functions are reusable

âœ… Object-Oriented Programming
â€¢Better modeling of real-world scenarios
â€¢Encourages code reuse (inheritance, polymorphism)
â€¢Easier to maintain and extend

ðŸ”¹ 6. When to Use
Situation	                            Use
Small scripts or tools	                Modular Programming
Large software systems	                Object-Oriented Programming
Performance-critical tasks	            Modular, low-overhead
Projects needing real-world modeling	OOP is ideal

*/
